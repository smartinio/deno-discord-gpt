name: Deploy

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Needed for auth with Deno Deploy
      contents: read # Needed to clone the repository

    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Install Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Install deployctl
        run: deno install -Arfg jsr:@deno/deployctl

      - name: Deploy new version
        uses: denoland/deployctl@v1
        with:
          project: sam-discord-gpt
          entrypoint: "main.ts"
          root: "."

      - name: Get new deployment ID and health check
        id: health
        env:
          DENO_DEPLOY_API_TOKEN: ${{ secrets.DENO_DEPLOY_API_TOKEN }}
        run: |
          # Get the newest deployment ID
          new_deployment_id=$(deployctl api --token=${{ env.DENO_DEPLOY_API_TOKEN }} projects/sam-discord-gpt/deployments | jq -r 'map(select(.status == "success")) | sort_by(.createdAt) | reverse | .[0].id')
          echo "new_deployment_id=$new_deployment_id" >> $GITHUB_OUTPUT

          # Wait for deployment to be ready
          for i in {1..60}; do
            status=$(deployctl api --token=${{ env.DENO_DEPLOY_API_TOKEN }} deployments/$new_deployment_id | jq -r '.status')
            if [ "$status" = "success" ]; then
              if curl -s --max-time 10 https://sam-discord-gpt.deno.dev/ready | jq -e '.ready == true' >/dev/null; then
                echo "✅ Deployment ready"
                break
              fi
            fi
            [ $i -eq 60 ] && { echo "❌ Deployment timeout"; exit 1; }
            sleep 2
          done

      - name: Clean up old deployments
        env:
          DENO_DEPLOY_API_TOKEN: ${{ secrets.DENO_DEPLOY_API_TOKEN }}
        run: |
          new_deployment_id="${{ steps.health.outputs.new_deployment_id }}"

          # Get all deployments except the new one and delete them
          old_deployments=$(deployctl api --token=${{ env.DENO_DEPLOY_API_TOKEN }} projects/sam-discord-gpt/deployments | \
            jq -r --arg new_id "$new_deployment_id" '.[] | select(.id != $new_id) | .id')

          if [ -n "$old_deployments" ]; then
            echo "🧹 Cleaning up old deployments..."
            echo "$old_deployments" | while read -r deployment_id; do
              deployctl deployments delete --force --token=${{ env.DENO_DEPLOY_API_TOKEN }} $deployment_id || true
              sleep 1
            done
          fi

      - name: Final verification
        env:
          DENO_DEPLOY_API_TOKEN: ${{ secrets.DENO_DEPLOY_API_TOKEN }}
        run: |
          new_deployment_id="${{ steps.health.outputs.new_deployment_id }}"

          # Verify deployment is still active and service is healthy
          status=$(deployctl api --token=${{ env.DENO_DEPLOY_API_TOKEN }} deployments/$new_deployment_id | jq -r '.status')
          [ "$status" != "success" ] && { echo "❌ Deployment failed"; exit 1; }

          curl -s --max-time 10 https://sam-discord-gpt.deno.dev/ready | jq -e '.ready == true' >/dev/null || { echo "❌ Health check failed"; exit 1; }

          deployment_count=$(deployctl api --token=${{ env.DENO_DEPLOY_API_TOKEN }} projects/sam-discord-gpt/deployments | jq '. | length')
          echo "🚀 Deploy complete! Active deployments: $deployment_count"
